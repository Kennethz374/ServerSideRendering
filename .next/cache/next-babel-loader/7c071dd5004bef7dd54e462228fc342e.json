{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/sally/lighthouse/ReactPractise/NextJs/first-Next/pages/post.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//this page represent a single post page\n// import {withRouter} from \"next/router\"\nimport axios from \"axios\";\nimport Navbar from \"../components/Navbar\";\n\nvar Post = function Post(_ref) {\n  var id = _ref.id,\n      comments = _ref.comments;\n  return __jsx(React.Fragment, null, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Comments for Post #\", id), comments.map(function (comment) {\n    return __jsx(Comment, _extends({}, comment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }));\n  }));\n};\n\nvar Comment = function Comment(_ref2) {\n  var email = _ref2.email,\n      body = _ref2.body;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, email), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, body));\n};\n\nPost.getInitialProps = function _callee(_ref3) {\n  var query, res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref3.query;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=\".concat(query.id)));\n\n        case 3:\n          res = _context.sent;\n          data = res.data;\n          return _context.abrupt(\"return\", _objectSpread({}, query, {\n            comments: data\n          }));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Post; // const Post = (props) => (\n//   <>\n//   <Navbar/>\n//   <h1>Post page {props.router.query.id}</h1>\n//   </>\n// );\n// export default withRouter(Post);\n//query look at documents in next\n//there is a prop call id and set to 23 or some numbers\n// query is the parse object from index fetch url \n// use withRouter to wrap the whole component, and now you can see props inside withRouter under post\n// access whatever you need from the components.","map":{"version":3,"sources":["/Users/sally/lighthouse/ReactPractise/NextJs/first-Next/pages/post.js"],"names":["axios","Navbar","Post","id","comments","map","comment","Comment","email","body","getInitialProps","query","get","res","data"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,MAAEC,EAAF,QAAEA,EAAF;AAAA,MAAKC,QAAL,QAAKA,QAAL;AAAA,SACX,4BACA,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwBD,EAAxB,CAFA,EAGCC,QAAQ,CAACC,GAAT,CAAa,UAAAC,OAAO;AAAA,WACnB,MAAC,OAAD,eAAaA,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADmB;AAAA,GAApB,CAHD,CADW;AAAA,CAAb;;AAUA,IAAMC,OAAO,GAAG,SAAVA,OAAU,QAAmB;AAAA,MAAjBC,KAAiB,SAAjBA,KAAiB;AAAA,MAAVC,IAAU,SAAVA,IAAU;AACjC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,IAAJ,CAFF,CADF;AAMD,CAPD;;AAQAP,IAAI,CAACQ,eAAL,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,UAAAA,KAAR,SAAQA,KAAR;AAAA;AAAA,2CACHX,KAAK,CAACY,GAAN,gEAAkED,KAAK,CAACR,EAAxE,EADG;;AAAA;AACfU,UAAAA,GADe;AAEdC,UAAAA,IAFc,GAEND,GAFM,CAEdC,IAFc;AAAA,6DAGVH,KAHU;AAGHP,YAAAA,QAAQ,EAACU;AAHN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAKA,eAAeZ,IAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA","sourcesContent":["//this page represent a single post page\n// import {withRouter} from \"next/router\"\nimport axios from \"axios\"\nimport Navbar from \"../components/Navbar\"\n\nconst Post = ({id,comments}) => (\n  <>\n  <Navbar/>\n  <h1>Comments for Post #{id}</h1>\n  {comments.map(comment => (\n    <Comment {...comment}/>\n  ))}\n  </>\n);\n\nconst Comment = ({email, body}) => {\n  return (\n    <div>\n      <h5>{email}</h5>\n      <p>{body}</p>\n    </div>\n  )\n}\nPost.getInitialProps = async ({query}) => {\n  const res = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${query.id}`)\n  const {data} = res;\n  return {...query, comments:data};\n};\nexport default Post;\n\n\n// const Post = (props) => (\n//   <>\n//   <Navbar/>\n//   <h1>Post page {props.router.query.id}</h1>\n//   </>\n// );\n// export default withRouter(Post);\n\n\n\n\n\n//query look at documents in next\n//there is a prop call id and set to 23 or some numbers\n// query is the parse object from index fetch url \n\n\n// use withRouter to wrap the whole component, and now you can see props inside withRouter under post\n// access whatever you need from the components.\n"]},"metadata":{},"sourceType":"module"}